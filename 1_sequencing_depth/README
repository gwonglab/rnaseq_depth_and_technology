The analysis of the effect of input dataset size of assemblies can be recreated
using the scripts in this directory. The subset.py script is called by
assemble-align.sh and is not used directly.

build-reference.sh
map-reads.sh
assemble-align.sh
subset.py
count-exon-bases.py

Note that the SRR1523365 dataset was run using an alternative command in the
map-reads.sh step.  By trimming the 5'-ends of the reads much more alignable
material was found.  In order to reproduce this in the current script two
lines must be uncommented.

The *.sh scripts are intended to be run with the Slurm scheduler.  As such they
use parameters generated by the Slurm system.  However, this has been limited
to only two environment variables, so it should be simple to adapt these to
running under other systems:

1. SLURM_JOB_CPUS_PER_NODE  This is used by the scripts to set the number of
threads used by programs that can be run in a multi-threaded mode.

2. SLURM_ARRAY_TASK_ID  The map-reads.sh step is broken into hundreds of
smaller steps.  For each dataset, the script is run multiple times, once for
each value of SLURM_ARRAY_TASK_ID between 1 and ceiling(N/1,000,000) where N is
the number of read-pairs in the dataset.  It is used similarly in the
assemble-align.sh step where it sets the size of a the subset (in units of
gigabases) being processed.

For example,  sbatch --array=1-264 ./map-reads.sh SRR980471.sra

can be roughly approximated by the Bash command sequence:
    for i in {1..264}; do
        export SLURM_JOB_CPUS_PER_NODE=1   # max threads used in script
        export SLURM_ARRAY_TASK_ID=$i      # number of sub-step being run
        ./map-reads.sh SRR980471.sra
    done

The more complex array argument used for the assemble-align.sh command,  
--array=1-6,8-16:2 is equivalent to
    for i in {1 2 3 4 5 6 8 10 12 14 16}

Eric J. Carpenter


# The following commands reproduce the work described in the paper.
# Before running these the reference and read-data files need to be obtained. 

# preprocess the references - need GFF files for this step
sbatch ./build-reference.sh GCF_000001405.29_GRCh38.p3_genomic.fna.gz
sbatch ./build-reference.sh GCF_000001635.24_GRCm38.p4_genomic.fna.gz
sbatch ./build-reference.sh GCF_000001735.3_TAIR10_genomic.fna.gz
sbatch ./build-reference.sh GCF_000002985.6_WBcel235_genomic.fna.gz
sbatch ./build-reference.sh GCF_000005425.2_Build_4.0_genomic.fna.gz
sbatch ./build-reference.sh GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.gz

# map subsets of one million spots (read-pairs) to the reference transcriptomes
sbatch --array=1-193 ./map-reads.sh DRR018424.sra
sbatch --array=1-259 ./map-reads.sh SRR1047863.sra
sbatch --array=1-203 ./map-reads.sh SRR1061361.sra
sbatch --array=1-208 ./map-reads.sh SRR1178906.sra
sbatch --array=1-141 ./map-reads.sh SRR1509508.sra
sbatch --array=1-229 ./map-reads.sh SRR1523365.sra  # check comments here
sbatch --array=1-355 ./map-reads.sh SRR1732347.sra
sbatch --array=1-264 ./map-reads.sh SRR980471.sra

# choose a subsest of the read-pairs, assemble, and align the scaffolds 
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh DRR018424
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh SRR1047863
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh SRR1061361
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh SRR1178906
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh SRR1509508
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh SRR1523365
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh SRR1732347
sbatch --array=1-6,8-16:2 ./assembly-alignment.sh SRR980471

# these commands report counts of bases aligned in exonic regions
# they are not intend to be run through Slurm

./count-exon-bases.py REF/GCF_000001735.3_TAIR10_genomic.gff \
    DRR018424-assembly/DRR018424-??G/DRR018424-??G-GCF_000001735.3-fine.psl
./count-exon-bases.py REF/GCF_000001405.29_GRCh38.p3_genomic.gff \
    SRR1047863-assembly/SRR1047863-??G/SRR1047863-??G-GCF_000001405.29-fine.psl
./count-exon-bases.py REF/GCF_000001735.3_TAIR10_genomic.gff \
    SRR1061361-assembly/SRR1061361-??G/SRR1061361-??G-GCF_000001735.3-fine.psl
./count-exon-bases.py REF/GCF_000005425.2_Build_4.0_genomic.gff \
    SRR1178906-assembly/SRR1178906-??G/SRR1178906-??G-GCF_000005425.2-fine.psl
./count-exon-bases.py REF/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.gff \
    SRR1509508-assembly/SRR1509508-??G/SRR1509508-??G-GCF_000001215.4-fine.psl
./count-exon-bases.py REF/GCF_000002985.6_WBcel235_genomic.gff \
    SRR1523365-assembly/SRR1523365-??G/SRR1523365-??G-GCF_000002985.6-fine.psl
./count-exon-bases.py REF/GCF_000001635.24_GRCm38.p4_genomic.gff \
    SRR1732347-assembly/SRR1732347-??G/SRR1732347-??G-GCF_000001635.24-fine.psl
./count-exon-bases.py REF/GCF_000001405.29_GRCh38.p3_genomic.gff \
    SRR980471-assembly/SRR980471-??G/SRR980471-??G-GCF_000001405.29-fine.psl

# Figure 2 Analysis

./single_exon_new.sh
